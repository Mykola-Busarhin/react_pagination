{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","currentPage","totalPages","perPage","onPageChange","handleArrowClick","direction","condition","pages","Math","ceil","isFirstPage","isLastPage","length","className","classNames","disabled","href","onClick","map","page","isChosen","active","items","App","useState","setPerPage","setCurrentPage","firstItem","lastItem","id","onChange","event","target","value","selected","htmlFor","item","index","ReactDOM","render","document","getElementById"],"mappings":"yLAAO,SAASA,EAAWC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,E,2BCIIG,EAA8B,SAAC,GAKrC,IAJLC,EAII,EAJJA,YACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,QACAC,EACI,EADJA,aAEMC,EAAmB,SAACC,EAAmBC,GAKtCA,GACHH,EAL4B,SAAdE,EACZL,EAAc,EACdA,EAAc,IAOdO,EAAQd,EAAW,EAAGe,KAAKC,KAAKR,EAAaC,IAC7CQ,EAA8B,IAAhBV,EACdW,EAAaX,IAAgBO,EAAMK,OAEzC,OACE,mCACE,qBAAIC,UAAU,aAAd,UACE,oBAAIA,UAAWC,IAAW,YAAa,CAAEC,SAAUL,IAAnD,SACE,mBACE,UAAQ,WACRG,UAAU,YACVG,KAAK,QACL,gBAAeN,EACfO,QAAS,kBAAMb,EAAiB,OAAQM,IAL1C,oBAUDH,EAAMW,KAAI,SAAAC,GACT,IAAMC,EAAWD,IAASnB,EAE1B,OACE,oBAEEa,UAAWC,IAAW,YAAa,CAAEO,OAAQD,IAF/C,SAIE,mBACE,UAAQ,WACRP,UAAU,YACVG,KAAI,WAAMG,GACVF,QAAS,WACHjB,IAAgBmB,GAClBhB,EAAagB,IANnB,SAUGA,KAbEA,MAmBX,oBAAIN,UAAWC,IAAW,YAAa,CAAEC,SAAUJ,IAAnD,SACE,mBACE,UAAQ,WACRE,UAAU,YACVG,KAAK,QACL,gBAAeL,EACfM,QAAS,kBAAMb,EAAiB,OAAQO,IAL1C,0BChEJW,EAAQ7B,EAAW,EAAG,IACzByB,KAAI,SAAArB,GAAC,qBAAYA,MAEP0B,EAAgB,WAC3B,IACA,EAA8BC,mBAAS,GAAvC,mBAAOtB,EAAP,KAAgBuB,EAAhB,KACA,EAAsCD,mBAAS,GAA/C,mBAAOxB,EAAP,KAAoB0B,EAApB,KAEMC,EAAY,GAAK3B,EAAc,GAAKE,EAEpC0B,EAAW5B,EAAcE,EANZ,MAQfF,EAAcE,EAOlB,OACE,sBAAKW,UAAU,YAAf,UACE,uDAEA,mBAAGA,UAAU,OAAO,UAAQ,OAA5B,wBACWb,EADX,mBACiC2B,EADjC,cACgDC,EADhD,eAnBe,GAmBf,OAIA,sBAAKf,UAAU,iBAAf,UACE,qBAAKA,UAAU,0BAAf,SACE,yBACE,UAAQ,kBACRgB,GAAG,kBACHhB,UAAU,eACViB,SAnBY,SAACC,GACrBN,GAAYM,EAAMC,OAAOC,OACzBP,EAAe,IAaT,UAME,wBAAQO,MAAM,IAAd,eACA,wBAAQA,MAAM,IAAIC,UAAQ,EAA1B,eACA,wBAAQD,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,qBAIJ,uBAAOE,QAAQ,kBAAkBtB,UAAU,qBAA3C,+BAMF,cAAC,EAAD,CACEb,YAAaA,EACbC,WA9Ca,GA+CbC,QAASA,EACTC,aAAcuB,IAGhB,6BACGJ,EAAMJ,KAAI,SAACkB,EAAMC,GAIhB,UAHqBA,IAAUrC,EAAc,GAAKE,MAC9BmC,EAAQrC,EAAcE,KAItC,oBAAe,UAAQ,OAAvB,SAA+BkC,GAAtBA,YCjEvBE,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4d47e9df.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  currentPage: number;\n  totalPages: number;\n  perPage: number;\n  onPageChange: (page: number) => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  currentPage,\n  totalPages,\n  perPage,\n  onPageChange,\n}) => {\n  const handleArrowClick = (direction: string, condition: boolean) => {\n    const newPage = direction === 'prev'\n      ? currentPage - 1\n      : currentPage + 1;\n\n    if (!condition) {\n      onPageChange(newPage);\n    }\n  };\n\n  const pages = getNumbers(1, Math.ceil(totalPages / perPage));\n  const isFirstPage = currentPage === 1;\n  const isLastPage = currentPage === pages.length;\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li className={classNames('page-item', { disabled: isFirstPage })}>\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={isFirstPage}\n            onClick={() => handleArrowClick('prev', isFirstPage)}\n          >\n            «\n          </a>\n        </li>\n        {pages.map(page => {\n          const isChosen = page === currentPage;\n\n          return (\n            <li\n              key={page}\n              className={classNames('page-item', { active: isChosen })}\n            >\n              <a\n                data-cy=\"pageLink\"\n                className=\"page-link\"\n                href={`#${page}`}\n                onClick={() => {\n                  if (currentPage !== page) {\n                    onPageChange(page);\n                  }\n                }}\n              >\n                {page}\n              </a>\n            </li>\n          );\n        })}\n\n        <li className={classNames('page-item', { disabled: isLastPage })}>\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={isLastPage}\n            onClick={() => handleArrowClick('next', isLastPage)}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\n\nexport const App: React.FC = () => {\n  const totalPages = 42;\n  const [perPage, setPerPage] = useState(5);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  const firstItem = 1 + (currentPage - 1) * perPage;\n\n  const lastItem = currentPage * perPage > totalPages\n    ? totalPages\n    : currentPage * perPage;\n\n  const handlePerPage = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setPerPage(+event.target.value);\n    setCurrentPage(1);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${currentPage} (items ${firstItem} - ${lastItem} of ${totalPages})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            onChange={handlePerPage}\n          >\n            <option value=\"3\">3</option>\n            <option value=\"5\" selected>5</option>\n            <option value=\"10\">10</option>\n            <option value=\"20\">20</option>\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n\n      {/* Move this markup to Pagination */}\n      <Pagination\n        currentPage={currentPage}\n        totalPages={totalPages}\n        perPage={perPage}\n        onPageChange={setCurrentPage}\n\n      />\n      <ul>\n        {items.map((item, index) => {\n          const hasfirstItem = index >= (currentPage - 1) * perPage;\n          const haslastItem = index < currentPage * perPage;\n\n          if (hasfirstItem && haslastItem) {\n            return (\n              <li key={item} data-cy=\"item\">{item}</li>\n            );\n          }\n\n          return false;\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}